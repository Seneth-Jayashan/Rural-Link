import { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';

const BASE = import.meta.env.VITE_API_URL || 'http://localhost:5000'

const AuthContext = createContext({ user:null, loading:true })

export function AuthProvider({ children }){
Â  const [user, setUser] = useState(null)
Â  const [loading, setLoading] = useState(true)

Â  const init = useCallback(async ()=> {
Â  Â  try {
Â  Â  Â  const token = localStorage.getItem('token')
Â  Â  Â  if (token) {
Â  Â  Â  Â  const res = await fetch(`${BASE}/api/auth/me`, {
Â  Â  Â  Â  Â  headers: { 'Authorization': `Bearer ${token}` }
Â  Â  Â  Â  })
Â  Â  Â  Â  const data = await res.json()
Â  Â  Â  Â  if (res.ok) {
Â  Â  Â  Â  Â  setUser(data.user)
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  localStorage.removeItem('token') Â // ðŸ‘ˆ token invalid
Â  Â  Â  Â  Â  setUser(null)
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  } catch {
Â  Â  Â  localStorage.removeItem('token')
Â  Â  Â  setUser(null)
Â  Â  }
Â  Â  setLoading(false)
Â  }, [])


Â  useEffect(()=>{ init() },[init])

Â  const login = useCallback(async (email, password)=>{
Â  Â  const res = await fetch(`${BASE}/api/auth/login`,{ method:'POST', headers:{ 'Content-Type':'application/json' }, credentials:'include', body: JSON.stringify({ email, password }) })
Â  Â  const data = await res.json()
Â  Â  if (data.token) localStorage.setItem('token', data.token)
Â  Â  if(!res.ok) throw new Error(data.message || 'Login failed')
Â  Â  setUser(data.user)
Â  Â  return { ...data.user, token: data.token }
Â  },[])

Â  const register = useCallback(async (payload)=>{
Â  Â  const formData = new FormData()
Â  Â  Object.entries(payload).forEach(([key, value])=>{
Â  Â  Â  if (value === undefined || value === null) return
Â  Â  Â  if (key === 'profilePic') {
Â  Â  Â  Â  if (value instanceof File) formData.append('profilePic', value)
Â  Â  Â  } else if (key === 'address' && typeof value === 'object') {
Â  Â  Â  Â  // Handle nested address object by flattening it
Â  Â  Â  Â  Object.entries(value).forEach(([addrKey, addrValue]) => {
Â  Â  Â  Â  Â  if (addrValue !== undefined && addrValue !== null) {
Â  Â  Â  Â  Â  Â  formData.append(`address.${addrKey}`, addrValue)
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  })
Â  Â  Â  } else if (key === 'shopLocation' && typeof value === 'object') {
Â  Â  Â  Â  // Flatten shopLocation including coordinates
Â  Â  Â  Â  Object.entries(value).forEach(([shopKey, shopVal]) => {
Â  Â  Â  Â  Â  if (shopKey === 'coordinates' && typeof shopVal === 'object') {
Â  Â  Â  Â  Â  Â  if (shopVal.latitude !== undefined && shopVal.latitude !== null) {
Â  Â  Â  Â  Â  Â  Â  formData.append('shopLocation.coordinates.latitude', shopVal.latitude)
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  if (shopVal.longitude !== undefined && shopVal.longitude !== null) {
Â  Â  Â  Â  Â  Â  Â  formData.append('shopLocation.coordinates.longitude', shopVal.longitude)
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  } else if (shopVal !== undefined && shopVal !== null) {
Â  Â  Â  Â  Â  Â  formData.append(`shopLocation.${shopKey}`, shopVal)
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  })
Â  Â  Â  } else {
Â  Â  Â  Â  formData.append(key, value)
Â  Â  Â  }
Â  Â  })

Â  Â  const res = await fetch(`${BASE}/api/auth/register`,{
Â  Â  Â  method:'POST',
Â  Â  Â  credentials:'include',
Â  Â  Â  body: formData
Â  Â  })
Â  Â  const data = await res.json()
Â  Â  if(!res.ok) throw new Error(data.message || 'Registration failed')
Â  Â  return true
Â  },[])

Â  const logout = useCallback(async ()=> {
Â  Â  try {
Â  Â  Â  await fetch(`${BASE}/api/auth/logout`, { 
Â  Â  Â  Â  method: 'POST', 
Â  Â  Â  Â  credentials: 'include' 
Â  Â  Â  })
Â  Â  } catch (e) {
Â  Â  Â  console.warn('Logout request failed:', e)
Â  Â  } finally {
Â  Â  Â  localStorage.removeItem('token') Â // ðŸ‘ˆ clear saved token
Â  Â  Â  setUser(null)
Â  Â  }
Â  }, [])

// ----------------------------------------------------
// ðŸ‘‡ UPDATED: Forgot Password (Step 1: Request Code)
// ----------------------------------------------------

Â  /**
Â   * Sends a request to the backend to generate and send a 6-digit code.
Â   * Returns a verificationId if successful.
Â   * @param {string} email 
Â   * @returns {Promise<{verificationId: string | null}>}
Â   */
Â  const forgotPassword = useCallback(async (email) => {
Â  Â  const res = await fetch(`${BASE}/api/auth/forgot-password`, {
Â  Â  Â  method: 'POST',
Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  body: JSON.stringify({ email })
Â  Â  })
Â  Â  const data = await res.json()
Â  Â  if (!res.ok) throw new Error(data.message || 'Failed to send verification code')
Â  Â  
    // Return the message and the new verificationId
Â  Â  return { message: data.message, verificationId: data.verificationId }
Â  }, [])

// ----------------------------------------------------
// ðŸ‘‡ NEW: Verify Code (Step 2: Verify Code and get Final Reset Token)
// ----------------------------------------------------

Â  /**
Â   * Verifies the 6-digit code and returns the final, long-lived reset token.
Â   * @param {string} verificationId - ID received from forgotPassword.
Â   * @param {string} code - 6-digit code entered by the user.
Â   * @returns {Promise<{token: string}>}
Â   */
Â  const verifyCode = useCallback(async (verificationId, code) => {
Â  Â  const res = await fetch(`${BASE}/api/auth/verify-code`, {
Â  Â  Â  method: 'POST',
Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  body: JSON.stringify({ verificationId, code })
Â  Â  })
Â  Â  const data = await res.json()
Â  Â  if (!res.ok) throw new Error(data.message || 'Verification failed. Code may be invalid or expired.')
Â  Â  
    // The backend sends the final reset token back as 'token'
Â  Â  return { token: data.token }
Â  }, [])


// ----------------------------------------------------
// ðŸ‘‡ RESET PASSWORD (Step 3: Final Reset)
// ----------------------------------------------------

Â  /**
Â   * Resets the user's password using the final reset token.
Â   * @param {string} token - The long-lived token received from verifyCode.
Â   * @param {string} newPassword - The new password (must meet minimum length).
Â   * @returns {Promise<boolean>}
Â   */
Â  const resetPassword = useCallback(async (token, newPassword) => {
Â  Â  const res = await fetch(`${BASE}/api/auth/reset-password/${token}`, {
Â  Â  Â  method: 'POST',
Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  body: JSON.stringify({ newPassword })
Â  Â  })
Â  Â  const data = await res.json()
Â  Â  if (!res.ok) throw new Error(data.message || 'Failed to reset password. Link may be invalid or expired.')
Â  Â  return true
Â  }, [])


Â  const value = useMemo(()=>({ 
Â  Â  user, 
Â  Â  loading, 
Â  Â  init, 
Â  Â  login, 
Â  Â  register, 
Â  Â  logout, 
Â  Â  forgotPassword, // Step 1
Â  Â  verifyCode,     // Step 2 (NEW)
Â  Â  resetPassword   // Step 3
Â  }), [user, loading, init, login, register, logout, forgotPassword, verifyCode, resetPassword])

Â  return (
Â  Â  <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
Â  )
}

export function useAuth(){
Â  return useContext(AuthContext)
}